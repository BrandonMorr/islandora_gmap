<?php

/**
 * @file
 * General hook implementations.
 */

const SCRAPE_MODS_TO_GMAP_XPATHS = "//mods:subject/mods:cartographics/mods:coordinates\r\n//mods:subject/mods:geographic";
const SCRAPE_MODS_TO_GMAP_KML_XPATHS = "//mods:subject/mods:cartographics/mods:cartographicExtension/*[local-name() = 'kml']";
const SCRAPE_MODS_TO_GMAP_DESCRIPTION_XPATH = "//mods:note";
const SCRAPE_MODS_TO_GMAP_COORDS_REGEX = '/^[+\-]?\d+\.\d+,\s*[+\-]?\d+\.\d+?/';

/**
 * Implements hook_islandora_gmap_form_fieldset().
 */
function scrape_mods_to_gmap_islandora_gmap_form_fieldset(&$form_state) {
  $base = array(
    '#type' => 'fieldset',
    '#title' => t('MODS Scrape'),
  );

  $base['scrape_mods_to_gmap_xpaths'] = array(
    '#type' => 'textarea',
    '#title' => t('Coordinate XPaths'),
    '#default_value' => variable_get('scrape_mods_to_gmap_xpaths', SCRAPE_MODS_TO_GMAP_XPATHS),
  );
  $base['scrape_mods_to_gmap_kml_xpaths'] = array(
    '#type' => 'textarea',
    '#title' => t('KML XPaths'),
    '#default_value' => variable_get('scrape_mods_to_gmap_kml_xpaths', SCRAPE_MODS_TO_GMAP_KML_XPATHS),
    '#description' => t('XPaths matching the root &lt;kml/&gt; element of embedded KML documents.'),
  );
  $base['scrape_mods_to_gmap_description_xpath'] = array(
    '#type' => 'textfield',
    '#title' => t('Description XPath'),
    '#default_value' => variable_get('scrape_mods_to_gmap_description_xpath', SCRAPE_MODS_TO_GMAP_DESCRIPTION_XPATH),
    '#description' => t('XPath for scraping the object description. Used for info box text when "Show Point Info" is turned on.'),
  );
  $base['scrape_mods_to_gmap_attempt_cleanup'] = array(
    '#type' => 'checkbox',
    '#title' => t('Attempt cleanup?'),
    '#default_value' => variable_get('scrape_mods_to_gmap_attempt_cleanup', FALSE),
    '#description' => t('Ideally, values should be comma-separated, signed floating-point numbers indicating latitude and longitude respectively... Attempt some parsing to match expectations.'),
  );
  $base['scrape_mods_to_gmap_fallback_to_search'] = array(
    '#type' => 'checkbox',
    '#title' => t('Search fallback?'),
    '#default_value' => variable_get('scrape_mods_to_gmap_fallback_to_search', FALSE),
    '#description' => t('To support more human-readable values, such as "Charlottetown, PE, Canada", fallback to passing non-coordinate data as a text search to <a href="@api_url">Google Places API</a>. Notice the reference in the API documentation regarding higher (10-times) API quota usage.', array(
      '@api_url' => 'https://developers.google.com/places/web-service/search#TextSearchRequests',
    )),
  );
  return $base;
}

/**
 * Implements hook_islandora_gmap_gather_geojson().
 */
function scrape_mods_to_gmap_islandora_gmap_gather_geojson(AbstractObject $object) {
  module_load_include('inc', 'scrape_mods_to_gmap', 'includes/utilities');
  $xpaths = _scrape_mods_to_gmap_parse_paths(variable_get('scrape_mods_to_gmap_xpaths', SCRAPE_MODS_TO_GMAP_XPATHS));

  $get_value = function (DOMNode $node) {
    return trim($node->nodeValue);
  };
  $coords = array_map($get_value, _scrape_mods_to_gmap_scrape($object, $xpaths));
  $coords = array_filter($coords);

  // Match two optionally-signed comma-separated floating-point numbers.
  $good_coords = preg_grep(SCRAPE_MODS_TO_GMAP_COORDS_REGEX, $coords);
  $cleanup = variable_get('scrape_mods_to_gmap_attempt_cleanup', FALSE);
  $search = variable_get('scrape_mods_to_gmap_fallback_to_search', FALSE);

  $bad_coords = ($cleanup || $search) ?
    drupal_map_assoc(array_diff($coords, $good_coords)) :
    FALSE;

  if ($bad_coords && $cleanup) {
    $replaced = str_replace(';', ',', $bad_coords);
    $now_good = preg_grep(SCRAPE_MODS_TO_GMAP_COORDS_REGEX, $replaced);
    $bad_coords = array_diff_key($bad_coords, $now_good);
    $good_coords = array_merge($good_coords, $now_good);
  }

  $to_return = array_map(function ($coord) {
    return array(
      'type' => 'Feature',
      'geometry' => array(
        'type' => 'Point',
        'coordinates' => array_reverse(array_map('doubleval', array_map('trim', explode(',', $coord)))),
      ),
    );
  }, $good_coords);

  if ($bad_coords && $search) {
    module_load_include('inc', 'scrape_mods_to_gmap', 'includes/places');
    $searched = scrape_mods_to_gmap_search_fallback($bad_coords);
    if ($searched) {
      $to_return = array_merge($to_return, array_values($searched));
    }
  }

  return $to_return;
}

/**
 * Implements hook_islandora_gmap_gather_kml().
 */
function scrape_mods_to_gmap_islandora_gmap_gather_kml(AbstractObject $object) {
  module_load_include('inc', 'scrape_mods_to_gmap', 'includes/utilities');
  $xpaths = _scrape_mods_to_gmap_parse_paths(variable_get('scrape_mods_to_gmap_kml_xpaths', SCRAPE_MODS_TO_GMAP_KML_XPATHS));

  $get_value = function (DOMNode $node, $pos) use ($object) {
    return url("islandora/object/{$object->id}/datastream/MODS/islandora_gmap_scrape_kml/$pos/loc.kml", array(
      'absolute' => TRUE,
    ));
  };
  $kml = array();
  foreach (_scrape_mods_to_gmap_scrape($object, $xpaths) as $pos => $node) {
    $kml[] = $get_value($node, $pos);
  }
  return $kml;
}

/**
 * Implements hook_menu().
 */
function scrape_mods_to_gmap_menu() {
  $items = array();

  $items['islandora/object/%islandora_object/datastream/%islandora_datastream/islandora_gmap_scrape_kml'] = array(
    'title' => 'Scrape KML',
    'page callback' => '_scrape_mods_to_gmap_scrape_kml',
    'page arguments' => array(4, 6),
    'access callback' => '_scrape_mods_to_gmap_scrape_kml_access_callback',
    'access arguments' => array(4),
    'type' => MENU_CALLBACK,
    'file' => 'includes/scrape_kml.inc',
  );

  return $items;
}

/**
 * Access callback for the KML scrape callback.
 */
function _scrape_mods_to_gmap_scrape_kml_access_callback($datastream) {
  return $datastream->id == 'MODS' && islandora_datastream_access(ISLANDORA_VIEW_OBJECTS, $datastream);
}

/**
 * Implements MODULE_preprocess_HOOK().
 */
function scrape_mods_to_gmap_preprocess_islandora_gmap_infobox(&$variables) {
  // Add the object's description to the infobox body.
  module_load_include('inc', 'scrape_mods_to_gmap', 'includes/utilities');
  $islandora_object = $variables['islandora_object'];
  $description = _scrape_mods_to_gmap_get_object_description($islandora_object);
  if ($description) {
    $variables['islandora_gmap_infobox_body'] .= "<p>$description</p>";
  }
}
