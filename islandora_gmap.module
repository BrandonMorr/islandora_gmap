<?php

/**
 * @file
 * Base hook implementations.
 */

/**
 * Implements hook_menu().
 */
function islandora_gmap_menu() {
  $items = array();

  $items['admin/islandora/tools/gmaps'] = array(
    'title' => 'Google Maps',
    'description' => 'Configure the Islandora Google Maps module.',
    'page callback' => 'drupal_get_form',
    'access arguments' => array('administer site configuration'),
    'page arguments' => array('islandora_gmap_admin_form'),
    'file' => 'includes/admin.form.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implements hook_islandora_gmap_form_fieldset().
 */
function islandora_gmap_islandora_gmap_form_fieldset(&$form_state) {
  $base = array(
    '#type' => 'fieldset',
    '#title' => t('Basic Configuration'),
  );

  $base['islandora_gmap_collapsed'] = array(
    '#type' => 'checkbox',
    '#title' => t('Collapse map by default?'),
    '#default_value' => variable_get('islandora_gmap_collapsed', TRUE),
    '#description' => t('Whether or not the fieldset containing the map should be collapsed by default. The user can toggle the collapse.'),
  );
  $base['islandora_gmap_width'] = array(
    '#title' => t('Map width'),
    '#type' => 'textfield',
    '#size' => 10,
    '#default_value' => variable_get('islandora_gmap_width', '600'),
    '#description' => t('The width, in pixels, of the map. May be overridden with CSS.'),
  );
  $base['islandora_gmap_height'] = array(
    '#title' => t('Map height'),
    '#type' => 'textfield',
    '#size' => 10,
    '#default_value' => variable_get('islandora_gmap_height', '600'),
    '#description' => t('The height, in pixels, of the map. May be overridden with CSS.'),
  );
  $base['islandora_gmap_cluster_points'] = array(
    '#title' => t('Cluster points'),
    '#type' => 'checkbox',
    '#default_value' => variable_get('islandora_gmap_cluster_points', FALSE),
    '#description' => t('Whether to cluster point markers on the map.'),
  );
  $base['islandora_gmap_show_point_info'] = array(
    '#title' => t('Show Point Info'),
    '#type' => 'checkbox',
    '#default_value' => variable_get('islandora_gmap_show_point_info', FALSE),
    '#description' => t('On clicking, show a window with information about the point.'),
  );
  $base['islandora_gmap_map_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Data settings'),
    'islandora_gmap_fit_bounds' => array(
      '#type' => 'checkbox',
      '#title' => t('Fit viewport to data?'),
      '#default_value' => variable_get('islandora_gmap_fit_bounds', TRUE),
      '#description' => t('Pan and zoom the viewport such that all data is visible; otherwise, the viewport will be panned to the center of the data.'),
    ),
    'islandora_gmap_initial_zoom' => array(
      '#title' => t('Initial zoom level'),
      '#type' => 'textfield',
      '#size' => 10,
      '#default_value' => variable_get('islandora_gmap_initial_zoom', '10'),
      '#description' => t('The higher the number, the higher the zoom. Only applicable when <em>not</em> fitting to data.'),
      '#states' => array(
        'visible' => array(
          ':input[name=islandora_gmap_fit_bounds]' => array('checked' => FALSE),
        ),
      ),
    ),
    'islandora_gmap_min_zoom' => array(
      '#title' => t('Minimum zoom level'),
      '#type' => 'textfield',
      '#size' => 10,
      '#default_value' => variable_get('islandora_gmap_min_zoom', -1),
      '#description' => t('The higher the number, the higher the zoom; negative for no configured minimum.'),
    ),
    'islandora_gmap_max_zoom' => array(
      '#title' => t('Maximum zoom level'),
      '#type' => 'textfield',
      '#size' => 10,
      '#default_value' => variable_get('islandora_gmap_max_zoom', 16),
      '#description' => t('The higher the number, the higher the zoom; negative for no configured maximum.'),
    ),
  );
  $base['islandora_gmap_api_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Google API Key'),
    '#default_value' => variable_get('islandora_gmap_api_key'),
    '#description' => t('Key for access to the API. See <a href="@url">Google documentation</a> for details.', array(
      '@url' => 'https://developers.google.com/maps/documentation/javascript/get-api-key',
    )),
  );
  $base['islandora_gmap_server_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Google Server Key'),
    '#default_value' => variable_get('islandora_gmap_server_key'),
    '#description' => t('Server API key for access to the "places" API. See <a href=@url">Google documentation</a> for details.', array(
      '@url' => 'https://developers.google.com/places/web-service/get-api-key',
    )),
  );

  return $base;
}

/**
 * Implements hook_islandora_view_object().
 */
function islandora_gmap_islandora_view_object(AbstractObject $object) {
  module_load_include('inc', 'islandora_gmap', 'includes/utilities');
  $geojson_info = islandora_gmap_gather_geojson($object);
  if ($geojson_info && variable_get('islandora_gmap_show_point_info', FALSE)) {
    $infobox_html = theme('islandora_gmap_infobox', array(
      'islandora_object' => $object,
    ));
    foreach ($geojson_info['features'] as &$feature) {
      $feature['properties'] = array('infobox_html' => $infobox_html);
    }
  }
  $kml_info = islandora_gmap_gather_kml($object);
  return islandora_gmap_map_view($object, $geojson_info, $kml_info);
}

/**
 * Build up the map using the gmap API.
 *
 * @param array|null $geojson_info
 *   The geojson array.
 * @param array|null $kml_info
 *   The kml info.
 */
function islandora_gmap_map_view($object, $geojson_info, $kml_info) {
  module_load_include('inc', 'islandora_gmap', 'includes/utilities');
  $mod_path = drupal_get_path('module', 'islandora_gmap');

  $parse_zoom_constraint = function ($value) {
    return $value < 0 ?
      NULL :
      intval($value);
  };

  if ($geojson_info || $kml_info) {
    $width = variable_get('islandora_gmap_width', '600');
    $height = variable_get('islandora_gmap_height', '600');
    $collapsed = variable_get('islandora_gmap_collapsed', TRUE);
    $id = drupal_html_id('islandora_gmap');
    $renderable = array(
      '#type' => 'markup',
      '#attached' => array(
        'js' => array(
          array(
            'type' => 'setting',
            'data' => array(
              'islandora_gmap' => array(
                'data' => array(
                  $id => array(
                    'geojson' => $geojson_info,
                    'kml' => $kml_info,
                    'cluster_points' => variable_get('islandora_gmap_cluster_points', FALSE),
                    'show_point_info' => variable_get('islandora_gmap_show_point_info', FALSE),
                    'map_settings' => array(
                      'center' => array('lat' => 0, 'lng' => 0),
                      'zoom' => intval(variable_get('islandora_gmap_initial_zoom', 10)),
                      'minZoom' => $parse_zoom_constraint(variable_get('islandora_gmap_min_zoom', -1)),
                      'maxZoom' => $parse_zoom_constraint(variable_get('islandora_gmap_max_zoom', 16)),
                    ),
                    'fit' => variable_get('islandora_gmap_fit_bounds', TRUE),
                  ),
                ),
              ),
            ),
          ),
          "$mod_path/js/map.js",
          array(
            'type' => 'external',
            'data' => url('//maps.googleapis.com/maps/api/js', array(
              'query' => array(
                'key' => variable_get('islandora_gmap_api_key'),
                'callback' => 'Drupal.islandora_gmap.init',
              ),
            )),
            'defer' => TRUE,
          ),
        ),
        'css' => array(
          array(
            'type' => 'inline',
            'data' => "#$id { width: {$width}px; height: {$height}px}",
          ),
        ),
      ),
      '#attributes' => array(
        'id' => $id,
      ),
      '#theme_wrappers' => array('container'),
      '#markup' => t('Map loading...'),
    );

    if (variable_get('islandora_gmap_cluster_points', FALSE)) {
      $markerclusterer_path = libraries_get_path('markerclusterer');
      $renderable['#attached']['js'][] = "$markerclusterer_path/src/markerclusterer.js";
    }

    $fieldset = array(
      '#attached' => array(
        'js' => array(
          'misc/collapse.js',
          'misc/form.js',
        ),
      ),
      '#type' => 'fieldset',
      '#title' => t('Map'),
      '#attributes' => array(
        'class' => array(
          'collapsible',
          $collapsed ? 'collapsed' : '',
        ),
      ),
      'map' => $renderable,
    );

    return array(
      'islandora_gmap' => $fieldset,
    );
  }
}

/**
 * Implements hook_theme().
 */
function islandora_gmap_theme() {
  return array(
    'islandora_gmap_infobox' => array(
      'file' => 'theme/theme.inc',
      'template' => 'theme/islandora-gmap-infobox',
      'pattern' => 'islandora_gmap_infobox__',
      'variables' => array('islandora_object' => NULL),
    ),
  );
}
